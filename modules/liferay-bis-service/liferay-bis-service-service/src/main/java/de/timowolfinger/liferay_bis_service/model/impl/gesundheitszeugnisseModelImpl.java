/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.timowolfinger.liferay_bis_service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import de.timowolfinger.liferay_bis_service.model.gesundheitszeugnisse;
import de.timowolfinger.liferay_bis_service.model.gesundheitszeugnisseModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the gesundheitszeugnisse service. Represents a row in the &quot;gesundheitszeugnisse&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>gesundheitszeugnisseModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link gesundheitszeugnisseImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see gesundheitszeugnisseImpl
 * @generated
 */
public class gesundheitszeugnisseModelImpl
	extends BaseModelImpl<gesundheitszeugnisse>
	implements gesundheitszeugnisseModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a gesundheitszeugnisse model instance should use the <code>gesundheitszeugnisse</code> interface instead.
	 */
	public static final String TABLE_NAME = "gesundheitszeugnisse";

	public static final Object[][] TABLE_COLUMNS = {
		{"id", Types.BIGINT}, {"seriennummer_lt_form", Types.VARCHAR},
		{"dokument", Types.VARCHAR}, {"ausstellungsdatum", Types.TIMESTAMP},
		{"dokument_dateityp", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("seriennummer_lt_form", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dokument", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ausstellungsdatum", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dokument_dateityp", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table gesundheitszeugnisse (id LONG not null primary key,seriennummer_lt_form VARCHAR(75) null,dokument VARCHAR(75) null,ausstellungsdatum DATE null,dokument_dateityp VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table gesundheitszeugnisse";

	public static final String ORDER_BY_JPQL =
		" ORDER BY gesundheitszeugnisse.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY gesundheitszeugnisse.id ASC";

	public static final String DATA_SOURCE = "extDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public gesundheitszeugnisseModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return gesundheitszeugnisse.class;
	}

	@Override
	public String getModelClassName() {
		return gesundheitszeugnisse.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<gesundheitszeugnisse, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<gesundheitszeugnisse, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<gesundheitszeugnisse, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((gesundheitszeugnisse)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<gesundheitszeugnisse, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<gesundheitszeugnisse, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(gesundheitszeugnisse)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<gesundheitszeugnisse, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<gesundheitszeugnisse, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<gesundheitszeugnisse, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<gesundheitszeugnisse, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<gesundheitszeugnisse, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<gesundheitszeugnisse, Object>>();
		Map<String, BiConsumer<gesundheitszeugnisse, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<gesundheitszeugnisse, ?>>();

		attributeGetterFunctions.put("id", gesundheitszeugnisse::getId);
		attributeSetterBiConsumers.put(
			"id",
			(BiConsumer<gesundheitszeugnisse, Long>)
				gesundheitszeugnisse::setId);
		attributeGetterFunctions.put(
			"seriennummer_lt_form",
			gesundheitszeugnisse::getSeriennummer_lt_form);
		attributeSetterBiConsumers.put(
			"seriennummer_lt_form",
			(BiConsumer<gesundheitszeugnisse, String>)
				gesundheitszeugnisse::setSeriennummer_lt_form);
		attributeGetterFunctions.put(
			"dokument", gesundheitszeugnisse::getDokument);
		attributeSetterBiConsumers.put(
			"dokument",
			(BiConsumer<gesundheitszeugnisse, String>)
				gesundheitszeugnisse::setDokument);
		attributeGetterFunctions.put(
			"ausstellungsdatum", gesundheitszeugnisse::getAusstellungsdatum);
		attributeSetterBiConsumers.put(
			"ausstellungsdatum",
			(BiConsumer<gesundheitszeugnisse, Date>)
				gesundheitszeugnisse::setAusstellungsdatum);
		attributeGetterFunctions.put(
			"dokument_dateityp", gesundheitszeugnisse::getDokument_dateityp);
		attributeSetterBiConsumers.put(
			"dokument_dateityp",
			(BiConsumer<gesundheitszeugnisse, String>)
				gesundheitszeugnisse::setDokument_dateityp);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@Override
	public String getSeriennummer_lt_form() {
		if (_seriennummer_lt_form == null) {
			return "";
		}
		else {
			return _seriennummer_lt_form;
		}
	}

	@Override
	public void setSeriennummer_lt_form(String seriennummer_lt_form) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_seriennummer_lt_form = seriennummer_lt_form;
	}

	@Override
	public String getDokument() {
		if (_dokument == null) {
			return "";
		}
		else {
			return _dokument;
		}
	}

	@Override
	public void setDokument(String dokument) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dokument = dokument;
	}

	@Override
	public Date getAusstellungsdatum() {
		return _ausstellungsdatum;
	}

	@Override
	public void setAusstellungsdatum(Date ausstellungsdatum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ausstellungsdatum = ausstellungsdatum;
	}

	@Override
	public String getDokument_dateityp() {
		if (_dokument_dateityp == null) {
			return "";
		}
		else {
			return _dokument_dateityp;
		}
	}

	@Override
	public void setDokument_dateityp(String dokument_dateityp) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dokument_dateityp = dokument_dateityp;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, gesundheitszeugnisse.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public gesundheitszeugnisse toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, gesundheitszeugnisse>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		gesundheitszeugnisseImpl gesundheitszeugnisseImpl =
			new gesundheitszeugnisseImpl();

		gesundheitszeugnisseImpl.setId(getId());
		gesundheitszeugnisseImpl.setSeriennummer_lt_form(
			getSeriennummer_lt_form());
		gesundheitszeugnisseImpl.setDokument(getDokument());
		gesundheitszeugnisseImpl.setAusstellungsdatum(getAusstellungsdatum());
		gesundheitszeugnisseImpl.setDokument_dateityp(getDokument_dateityp());

		gesundheitszeugnisseImpl.resetOriginalValues();

		return gesundheitszeugnisseImpl;
	}

	@Override
	public gesundheitszeugnisse cloneWithOriginalValues() {
		gesundheitszeugnisseImpl gesundheitszeugnisseImpl =
			new gesundheitszeugnisseImpl();

		gesundheitszeugnisseImpl.setId(this.<Long>getColumnOriginalValue("id"));
		gesundheitszeugnisseImpl.setSeriennummer_lt_form(
			this.<String>getColumnOriginalValue("seriennummer_lt_form"));
		gesundheitszeugnisseImpl.setDokument(
			this.<String>getColumnOriginalValue("dokument"));
		gesundheitszeugnisseImpl.setAusstellungsdatum(
			this.<Date>getColumnOriginalValue("ausstellungsdatum"));
		gesundheitszeugnisseImpl.setDokument_dateityp(
			this.<String>getColumnOriginalValue("dokument_dateityp"));

		return gesundheitszeugnisseImpl;
	}

	@Override
	public int compareTo(gesundheitszeugnisse gesundheitszeugnisse) {
		int value = 0;

		if (getId() < gesundheitszeugnisse.getId()) {
			value = -1;
		}
		else if (getId() > gesundheitszeugnisse.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof gesundheitszeugnisse)) {
			return false;
		}

		gesundheitszeugnisse gesundheitszeugnisse =
			(gesundheitszeugnisse)object;

		long primaryKey = gesundheitszeugnisse.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<gesundheitszeugnisse> toCacheModel() {
		gesundheitszeugnisseCacheModel gesundheitszeugnisseCacheModel =
			new gesundheitszeugnisseCacheModel();

		gesundheitszeugnisseCacheModel.id = getId();

		gesundheitszeugnisseCacheModel.seriennummer_lt_form =
			getSeriennummer_lt_form();

		String seriennummer_lt_form =
			gesundheitszeugnisseCacheModel.seriennummer_lt_form;

		if ((seriennummer_lt_form != null) &&
			(seriennummer_lt_form.length() == 0)) {

			gesundheitszeugnisseCacheModel.seriennummer_lt_form = null;
		}

		gesundheitszeugnisseCacheModel.dokument = getDokument();

		String dokument = gesundheitszeugnisseCacheModel.dokument;

		if ((dokument != null) && (dokument.length() == 0)) {
			gesundheitszeugnisseCacheModel.dokument = null;
		}

		Date ausstellungsdatum = getAusstellungsdatum();

		if (ausstellungsdatum != null) {
			gesundheitszeugnisseCacheModel.ausstellungsdatum =
				ausstellungsdatum.getTime();
		}
		else {
			gesundheitszeugnisseCacheModel.ausstellungsdatum = Long.MIN_VALUE;
		}

		gesundheitszeugnisseCacheModel.dokument_dateityp =
			getDokument_dateityp();

		String dokument_dateityp =
			gesundheitszeugnisseCacheModel.dokument_dateityp;

		if ((dokument_dateityp != null) && (dokument_dateityp.length() == 0)) {
			gesundheitszeugnisseCacheModel.dokument_dateityp = null;
		}

		return gesundheitszeugnisseCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<gesundheitszeugnisse, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<gesundheitszeugnisse, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<gesundheitszeugnisse, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(gesundheitszeugnisse)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<gesundheitszeugnisse, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<gesundheitszeugnisse, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<gesundheitszeugnisse, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((gesundheitszeugnisse)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, gesundheitszeugnisse>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					gesundheitszeugnisse.class, ModelWrapper.class);

	}

	private long _id;
	private String _seriennummer_lt_form;
	private String _dokument;
	private Date _ausstellungsdatum;
	private String _dokument_dateityp;

	public <T> T getColumnValue(String columnName) {
		Function<gesundheitszeugnisse, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((gesundheitszeugnisse)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id", _id);
		_columnOriginalValues.put(
			"seriennummer_lt_form", _seriennummer_lt_form);
		_columnOriginalValues.put("dokument", _dokument);
		_columnOriginalValues.put("ausstellungsdatum", _ausstellungsdatum);
		_columnOriginalValues.put("dokument_dateityp", _dokument_dateityp);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id", 1L);

		columnBitmasks.put("seriennummer_lt_form", 2L);

		columnBitmasks.put("dokument", 4L);

		columnBitmasks.put("ausstellungsdatum", 8L);

		columnBitmasks.put("dokument_dateityp", 16L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private gesundheitszeugnisse _escapedModel;

}