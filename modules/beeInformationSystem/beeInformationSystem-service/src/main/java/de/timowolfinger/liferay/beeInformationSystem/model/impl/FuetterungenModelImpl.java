/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.timowolfinger.liferay.beeInformationSystem.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import de.timowolfinger.liferay.beeInformationSystem.model.Fuetterungen;
import de.timowolfinger.liferay.beeInformationSystem.model.FuetterungenModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Fuetterungen service. Represents a row in the &quot;fuetterungen&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FuetterungenModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FuetterungenImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FuetterungenImpl
 * @generated
 */
public class FuetterungenModelImpl
	extends BaseModelImpl<Fuetterungen> implements FuetterungenModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a fuetterungen model instance should use the <code>Fuetterungen</code> interface instead.
	 */
	public static final String TABLE_NAME = "fuetterungen";

	public static final Object[][] TABLE_COLUMNS = {
		{"fuetterungen_id", Types.BIGINT}, {"futtermittel_id", Types.BIGINT},
		{"beginn", Types.TIMESTAMP}, {"ende", Types.TIMESTAMP},
		{"menge_kg", Types.BIGINT}, {"bienenvolk_id", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("fuetterungen_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("futtermittel_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("beginn", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ende", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("menge_kg", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("bienenvolk_id", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table fuetterungen (fuetterungen_id LONG not null primary key,futtermittel_id LONG,beginn DATE null,ende DATE null,menge_kg LONG,bienenvolk_id LONG)";

	public static final String TABLE_SQL_DROP = "drop table fuetterungen";

	public static final String ORDER_BY_JPQL =
		" ORDER BY fuetterungen.fuetterungen_id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY fuetterungen.fuetterungen_id ASC";

	public static final String DATA_SOURCE = "extDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FUETTERUNGEN_ID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FuetterungenModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _fuetterungen_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFuetterungen_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _fuetterungen_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Fuetterungen.class;
	}

	@Override
	public String getModelClassName() {
		return Fuetterungen.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Fuetterungen, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Fuetterungen, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Fuetterungen, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Fuetterungen)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Fuetterungen, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Fuetterungen, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Fuetterungen)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Fuetterungen, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Fuetterungen, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Fuetterungen, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Fuetterungen, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Fuetterungen, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Fuetterungen, Object>>();
		Map<String, BiConsumer<Fuetterungen, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Fuetterungen, ?>>();

		attributeGetterFunctions.put(
			"fuetterungen_id", Fuetterungen::getFuetterungen_id);
		attributeSetterBiConsumers.put(
			"fuetterungen_id",
			(BiConsumer<Fuetterungen, Long>)Fuetterungen::setFuetterungen_id);
		attributeGetterFunctions.put(
			"futtermittel_id", Fuetterungen::getFuttermittel_id);
		attributeSetterBiConsumers.put(
			"futtermittel_id",
			(BiConsumer<Fuetterungen, Long>)Fuetterungen::setFuttermittel_id);
		attributeGetterFunctions.put("beginn", Fuetterungen::getBeginn);
		attributeSetterBiConsumers.put(
			"beginn", (BiConsumer<Fuetterungen, Date>)Fuetterungen::setBeginn);
		attributeGetterFunctions.put("ende", Fuetterungen::getEnde);
		attributeSetterBiConsumers.put(
			"ende", (BiConsumer<Fuetterungen, Date>)Fuetterungen::setEnde);
		attributeGetterFunctions.put("menge_kg", Fuetterungen::getMenge_kg);
		attributeSetterBiConsumers.put(
			"menge_kg",
			(BiConsumer<Fuetterungen, Long>)Fuetterungen::setMenge_kg);
		attributeGetterFunctions.put(
			"bienenvolk_id", Fuetterungen::getBienenvolk_id);
		attributeSetterBiConsumers.put(
			"bienenvolk_id",
			(BiConsumer<Fuetterungen, Long>)Fuetterungen::setBienenvolk_id);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getFuetterungen_id() {
		return _fuetterungen_id;
	}

	@Override
	public void setFuetterungen_id(long fuetterungen_id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fuetterungen_id = fuetterungen_id;
	}

	@Override
	public long getFuttermittel_id() {
		return _futtermittel_id;
	}

	@Override
	public void setFuttermittel_id(long futtermittel_id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_futtermittel_id = futtermittel_id;
	}

	@Override
	public Date getBeginn() {
		return _beginn;
	}

	@Override
	public void setBeginn(Date beginn) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_beginn = beginn;
	}

	@Override
	public Date getEnde() {
		return _ende;
	}

	@Override
	public void setEnde(Date ende) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ende = ende;
	}

	@Override
	public long getMenge_kg() {
		return _menge_kg;
	}

	@Override
	public void setMenge_kg(long menge_kg) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_menge_kg = menge_kg;
	}

	@Override
	public long getBienenvolk_id() {
		return _bienenvolk_id;
	}

	@Override
	public void setBienenvolk_id(long bienenvolk_id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bienenvolk_id = bienenvolk_id;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Fuetterungen.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Fuetterungen toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Fuetterungen>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FuetterungenImpl fuetterungenImpl = new FuetterungenImpl();

		fuetterungenImpl.setFuetterungen_id(getFuetterungen_id());
		fuetterungenImpl.setFuttermittel_id(getFuttermittel_id());
		fuetterungenImpl.setBeginn(getBeginn());
		fuetterungenImpl.setEnde(getEnde());
		fuetterungenImpl.setMenge_kg(getMenge_kg());
		fuetterungenImpl.setBienenvolk_id(getBienenvolk_id());

		fuetterungenImpl.resetOriginalValues();

		return fuetterungenImpl;
	}

	@Override
	public Fuetterungen cloneWithOriginalValues() {
		FuetterungenImpl fuetterungenImpl = new FuetterungenImpl();

		fuetterungenImpl.setFuetterungen_id(
			this.<Long>getColumnOriginalValue("fuetterungen_id"));
		fuetterungenImpl.setFuttermittel_id(
			this.<Long>getColumnOriginalValue("futtermittel_id"));
		fuetterungenImpl.setBeginn(this.<Date>getColumnOriginalValue("beginn"));
		fuetterungenImpl.setEnde(this.<Date>getColumnOriginalValue("ende"));
		fuetterungenImpl.setMenge_kg(
			this.<Long>getColumnOriginalValue("menge_kg"));
		fuetterungenImpl.setBienenvolk_id(
			this.<Long>getColumnOriginalValue("bienenvolk_id"));

		return fuetterungenImpl;
	}

	@Override
	public int compareTo(Fuetterungen fuetterungen) {
		int value = 0;

		if (getFuetterungen_id() < fuetterungen.getFuetterungen_id()) {
			value = -1;
		}
		else if (getFuetterungen_id() > fuetterungen.getFuetterungen_id()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Fuetterungen)) {
			return false;
		}

		Fuetterungen fuetterungen = (Fuetterungen)object;

		long primaryKey = fuetterungen.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Fuetterungen> toCacheModel() {
		FuetterungenCacheModel fuetterungenCacheModel =
			new FuetterungenCacheModel();

		fuetterungenCacheModel.fuetterungen_id = getFuetterungen_id();

		fuetterungenCacheModel.futtermittel_id = getFuttermittel_id();

		Date beginn = getBeginn();

		if (beginn != null) {
			fuetterungenCacheModel.beginn = beginn.getTime();
		}
		else {
			fuetterungenCacheModel.beginn = Long.MIN_VALUE;
		}

		Date ende = getEnde();

		if (ende != null) {
			fuetterungenCacheModel.ende = ende.getTime();
		}
		else {
			fuetterungenCacheModel.ende = Long.MIN_VALUE;
		}

		fuetterungenCacheModel.menge_kg = getMenge_kg();

		fuetterungenCacheModel.bienenvolk_id = getBienenvolk_id();

		return fuetterungenCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Fuetterungen, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Fuetterungen, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Fuetterungen, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Fuetterungen)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Fuetterungen, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Fuetterungen, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Fuetterungen, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Fuetterungen)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Fuetterungen>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Fuetterungen.class, ModelWrapper.class);

	}

	private long _fuetterungen_id;
	private long _futtermittel_id;
	private Date _beginn;
	private Date _ende;
	private long _menge_kg;
	private long _bienenvolk_id;

	public <T> T getColumnValue(String columnName) {
		Function<Fuetterungen, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Fuetterungen)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("fuetterungen_id", _fuetterungen_id);
		_columnOriginalValues.put("futtermittel_id", _futtermittel_id);
		_columnOriginalValues.put("beginn", _beginn);
		_columnOriginalValues.put("ende", _ende);
		_columnOriginalValues.put("menge_kg", _menge_kg);
		_columnOriginalValues.put("bienenvolk_id", _bienenvolk_id);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("fuetterungen_id", 1L);

		columnBitmasks.put("futtermittel_id", 2L);

		columnBitmasks.put("beginn", 4L);

		columnBitmasks.put("ende", 8L);

		columnBitmasks.put("menge_kg", 16L);

		columnBitmasks.put("bienenvolk_id", 32L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Fuetterungen _escapedModel;

}